#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+TITLE: Metamorphic Testing of Cross-Language Sentiment Analysis
#+DESCRIPTION:
#+KEYWORDS: Metamorphic, Testing, Sentiment Analysis, Cross-Language
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* Introduction
The purpose of this research is assessing the quality of translation tool and quality of sentiment analysis tool. Finally, we will achieve a method, finding which translation tool conbining with which sentiment analysis tool together, for getting better sentiment analysis result.
Currently, most of sentiment analysis tool only support English. We want to find a method for let non-English people using English Sentiment Analysis tool with Machine translation tool, analysis their non-English text.
In the lit review I will include Metamorphic Testing Method and Machine translated. Currently, I have not found
* Test Data
Total have 46180 movies reviews.
| Ranking    | Number of Test Data | Percentage |
|------------+---------------------+------------|
| Ranking 10 |                7353 | 15.92 %    |
| Ramking 20 |               11209 | 24.27 %    |
| Ranking 30 |               16223 | 35.13 %    |
| Ranking 40 |                7663 | 16.59 %    |
| Ranking 50 |                3732 | 8.08 %     |

* Normalization
vâ€™ = (v-min)/(max-min) * (newmax-newmin) + newmin
* Assessing Machine translation tool quality
#+BEGIN_EXAMPLE

  +--------------------------------+      +----------------------------------+
  |                                |      |                                  |
  |        ---------------         |      |            -------------         |
  |   ----/               \----    |      |         --/             \--      |
  |  /    Chinese Origin       \   |      |        /     Google              |
  | (                           )--+------+-------(      Translated     )    |
  |  \        Data             X   |      |        \     Data          /     |
  |   ----\               /-\-- \  |      |         --\             /--      |
  |        ---------------   \   \ |      |            -------------         |
  |                           \   \|      |          -------------           |
  |                            \   |      |       --/             \--        |
  |                            |   |\     |      /      Baidu        \       |
  |                             \  | \----+-----(       Translated    )      |
  |                              \ |      |      \      Data         /       |
  |                               \|      |       --\             /--        |
  |                                |      |          -------------           |
  |                                |\     |                                  |
  |                                ||     |     -------------                |
  |                                | \    |  --/             \--             |
  |                                |  \   | /     Yandex        \            |
  |                                |   ---+-      Translated     )           |
  |                                |      | \     Data          /            |
  |                                |      |  --\             /--             |
  |                                |      |     -------------                |
  |                                |      |                                  |
  |                                |      |                                  |
  |                                |      |                                  |
  |                                |      |                                  |
  +--------------------------------+      +----------------------------------+

   Google Sentiment Analysis --------------   Google Sentment Analysis
                             correlation
#+END_EXAMPLE
** Method

** Result
+ Base on Google sentiment analysis tool
|                               | Google Score for Google translated data    | Google Score for Yandex translated data    | Google Score Baidu translated data         |
|-------------------------------+--------------------------------------------+--------------------------------------------+--------------------------------------------|
| Gooogle Score for origin data | 0.512 (Pearson Correlations)  p-value: 0.0 | 0.506 (Pearson Correlations) p-value: 0.0  | 0.490 (Pearson Correlations)  p-value: 0.0 |
| Google Score for origin data  | 0.381 (Kendall Correlations)  p-value: 0.0 | 0.375 (Kendall Correlations) p-value: 0.0  | 0.363 (Kendall Correlations) p-value: 0.0  |
| Google Score for origin data  | 0.504 (Spearman Correlations) p-value: 0.0 | 0.497 (Spearman Correlations) p-value: 0.0 | 0.482 (Spearman Correlations) p-value: 0.0 |
| Gooogle Score for origin data | 0.512 (Point Biserial) p-value: 0.0        | 0.506 (Point Biserial) p-value: 0.0        | 0.490 (Point Biserial) p-value: 0.0        |

 - Google translation tool quality > Yandex translation tool quality > Baidu translation tool quality

+ Base on Baidu sentiment analysis tool
|                                            | Baidu Positive Probability for Google translated data | Baidu Positive Probability for Yandex translated data | Baidu Positive Probability for Baidu translated data |
|--------------------------------------------+-------------------------------------------------------+-------------------------------------------------------+------------------------------------------------------|
| Baidu Positive Probability for origin data | 0.288 (Pearson Correlations)  p-value: 0.0            | 0.280 (Pearson Correlations)  p-value: 0.0            | 0.237 (Pearson Correlations)   p-value: 0.0          |
| Baidu Positive Probability for origin data | 0.188 (Kendall Correlations)  p-value: 0.0            | 0.174 (Kendall Correlations) p-value: 0.0             | 0.146 (Kendall Correlations) p-value:0.0             |
| Baidu Positive Probability for origin data | 0.271 (Spearman Correlations)  p-value: 0.0           | 0.249 (Spearman Correlations) p-value: 0.0            | 0.210 (Spearman Correlations) p-value: 0.0           |
| Baidu Positive Probability for origin data | 0.288 (Point Biserial) p-value: 0.0                   | 0.280 (Point Biserial) p-value: 0.0                   | 0.237 (Point Biserial) p-value: 0.0                  |

 - Google translation tool quality > Yandex translation tool quality > Baidu translation tool quality

* Assessing Sentiment analysis tool quality
[[./img/beforeNornBoxplot.jpg]]
[[./img/afterNornBoxplot.jpg]]
[[./img/heatmap.jpg]]

#+BEGIN_EXAMPLE


        +--------------------------+                              +--------------------------+
        |    Chinese   Ranking 10  |                              |   Yandex      Ranking 10 |
        |    origin    Ranking 20  |    Yandex translation tool   |   translated  Ranking 20 |
        |    data      Ranking 30  +----------------------------->|   Data        Ranking 30 |
        |              Ranking 40  |                              |               Ranking 40 |
        +              Ranking 50  +                              +               Ranking 50 +
        +--------------------------+                              +--------------------------+
                          -\                                              /
                            -\                                           /
                              -\                                        /
                                -\               -------------------   /
                                  -\       -----/                   \-/---
                                    -\  --/     using same                \--
                                      --        sentiment analysis tool      \
                                      (         analysis both side            )
                                       \                                     /
                                        --\                               /--
                                           -----\                   /-----
                                                 ----------+--------
                                                           |
                                                  -----------------------
                                            -----/                       \-----
                                          -/       calculate Mean Value        \-
                                      ----         by different ranking          )
                               ------/    -\       for both sild               /-
                        ------/             -----\                       /--\--
       +---------------/-----------+              -----------------------    \
       |                           |                              +----------+---------------+
       |                           |                              |                          |
       |                           |                              |                          |
       |                           |                              |                          |
       |                           |                              |                          |
       |                           |                              |                          |
       +---------------------------+                              |                          |
                                                                  +--------------------------+




              linear regression                                  liner regression




             slope
                                                                 slope
#+END_EXAMPLE
[[./img/MarginalMeansOfBaiduPositiveProbababilityToGoogleScoreStandardForOriginData.jpg]]
** Google Chinese sentiment analysis boxplot
#+BEGIN_SRC python :session :results file output
  import numpy as np
  from openpyxl import load_workbook
  import matplotlib as mpl

  ## agg backend is used to create plot as a .png file
  mpl.use('agg')

  import matplotlib.pyplot as plt

  def drawBoxPlots(title, data_to_plot, ax):

      # Create the boxplot
      bp = ax.boxplot(data_to_plot, patch_artist=True, showmeans=True)
      ## change outline color, fill color and linewidth of the boxes
      for box in bp['boxes']:
          # change outline color
          box.set( color='#7570b3', linewidth=2)
          # change fill color
          box.set( facecolor = '#1b9e77' )

      ## change color and linewidth of the whiskers
      for whisker in bp['whiskers']:
          whisker.set(color='#7570b3', linewidth=2)

      ## change color and linewidth of the caps
      for cap in bp['caps']:
          cap.set(color='#7570b3', linewidth=2)

      ## change color and linewidth of the medians
      for median in bp['medians']:
          median.set(color='#b2df8a', linewidth=2)

      ## change the style of fliers and their fill
      for flier in bp['fliers']:
          flier.set(marker='o', markerfacecolor='red', markersize=5, markeredgewidth=0.0, alpha=0.5)

      for mean in bp['means']:
          mean.set(marker = 's', markerfacecolor='red')

      ## Custom x-axis labels
      ax.set_xticklabels(['Ranking10', 'Ranking20', 'Ranking30', 'Ranking40', 'Ranking50'])
      ax.set_title(title)


  ## Create data
  '''
  np.random.seed(10)
  ranking10 = np.random.normal(100, 10, 200)
  ranking20 = np.random.normal(80, 30, 200)
  ranking30 = np.random.normal(90, 20, 200)
  ranking40 = np.random.normal(70, 25, 200)
  ranking50 = np.random.normal(70, 25, 200)
  '''
  ranking10 = np.array([])
  ranking20 = np.array([])
  ranking30 = np.array([])
  ranking40 = np.array([])
  ranking50 = np.array([])
  wb = load_workbook(filename='good.xlsx', read_only=True)
  ws = wb['Sheet1']

  #for row in range(1, 46181):
  for row in range(1, 10):
      ranking = ws.cell(row=row, column=20).value)
      value = ws.cell(row=row, column=17)
      if ranking == 10:
          ranking10 = np.append( ranking10 , value)
      elif ranking == 20:
          ranking20 = np.append (ranking20, value)
      elif ranking == 30:
          ranking30 = np.append (ranking30, value)
      elif ranking == 40:
          ranking40 = np.append (ranking40, value)
      elif ranking == 50:
          ranking50 = np.append (ranking50, value)
  '''
  ranking20.append([0])
  ranking30.append([1])
  ranking40.append([3])
  ranking50.append([4])
  '''
  ## combine these different collections into a list
  data_to_plot = [ranking10, ranking20, ranking30, ranking40, ranking50]


  #fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(9, 4))
  # Create a figure instance
  fig = plt.figure(1, figsize=(9, 6))
  # Create an axes instance
  ax = fig.add_subplot(111)
  ## add patch_artist=True option to ax.boxplot()
  ## to get fill color


  drawBoxPlots("google chinese sentiment analysis", data_to_plot, ax)
  # Save the figure
  fig.savefig("googleChineseSentimentAnalysis.png", bbox_inches='tight')

#+END_SRC

#+RESULTS:
[[file:Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-MzHCZL/python-Me3jED", line 64
    ranking = ws.cell(row=row, column=20).value)
                                               ^
SyntaxError: invalid syntax]]
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-MzHCZL/python-foVeeD", line 64
    ranking = ws.cell(row=row, column=3).value)
                                              ^
SyntaxError: invalid syntax]]
[[file:Python 3.6.4 (default, Jan  5 2018, 02:35:40)
[GCC 7.2.1 20171224] on linux
Type "help", "copyright", "credits" or "license" for more information.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-MzHCZL/python-kKjo78", line 64
    ranking = ws.cell(row=row, column=3).value)
                                              ^
SyntaxError: invalid syntax
python.el: native completion setup loaded]]
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-Xbwqve/python-4683rz", line 63, in <module>
    print (ws.cell(row=row, column=7).value)
  File "/usr/lib/python3.6/site-packages/openpyxl/worksheet/worksheet.py", line 307, in cell
    raise ValueError("Row or column values must be at least 1")
ValueError: Row or column values must be at least 1]]
[[file:Python 3.6.4 (default, Jan  5 2018, 02:35:40)
[GCC 7.2.1 20171224] on linux
Type "help", "copyright", "credits" or "license" for more information.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-Xbwqve/python-3h66Xh", line 63, in <module>
    print (ws.cell(row=row, column=7).value)
  File "/usr/lib/python3.6/site-packages/openpyxl/worksheet/worksheet.py", line 306, in cell
    if row < 1 or column < 1:
TypeError: '<' not supported between instances of 'tuple' and 'int'
python.el: native completion setup loaded]]

| chinese origin data                  | Google translated data | baidu translated data | yandex translated data |
|--------------------------------------+------------------------+-----------------------+------------------------|
| [[./googleChineseSentimentAnalysis.png]] |                        |                       |                        |
|                                      |                        |                       |                        |
Linear regression
slope

* Method for better compound mode for sentiment analysis tool and machine translation tool
